<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Heap Exploitation（主要记录知识框架和利用技巧，更多细节不在此记录）</title>
      <link href="/2021/08/17/Heap%20Exploitation/"/>
      <url>/2021/08/17/Heap%20Exploitation/</url>
      
        <content type="html"><![CDATA[<p>本文主要记录堆利用手法，并会随学习过程不断补充</p><span id="more"></span><h1 id="Heap-intro-brief"><a href="#Heap-intro-brief" class="headerlink" title="Heap intro brief"></a>Heap intro brief</h1><h2 id="Heap-memory-allocator"><a href="#Heap-memory-allocator" class="headerlink" title="Heap memory allocator"></a>Heap memory allocator</h2><ul><li><p>ptmalloc2  - glibc</p></li><li><p>…</p></li></ul><p>(先记录glibc，复杂的堆管理器之后学)</p><h2 id="Mechanism-of-glibc-malloc"><a href="#Mechanism-of-glibc-malloc" class="headerlink" title="Mechanism of glibc malloc"></a>Mechanism of glibc malloc</h2><h3 id="堆中数据结构"><a href="#堆中数据结构" class="headerlink" title="堆中数据结构"></a>堆中数据结构</h3><ol><li><p>malloc分配最小空间（SIZE_T*4）</p></li><li><p>chunk 结构 chunk头 + data</p></li></ol><p><img src="https://i.loli.net/2021/08/22/3r2lGx9jIoAwp4E.png" alt="chunk的结构"></p><h5 id="Chunk-分类"><a href="#Chunk-分类" class="headerlink" title="Chunk 分类"></a>Chunk 分类</h5><h6 id="allocated-chunk"><a href="#allocated-chunk" class="headerlink" title="allocated chunk"></a>allocated chunk</h6><ul><li><p>prev_size</p><ul><li>若<strong>连续记忆体</strong>上一堆块为free chunk，prev_size为前一个堆块大小</li><li>若<strong>连续记忆体</strong>上一块为allocated chunk，则为上一块的data</li></ul></li><li><p>size<br>由于size大小存在对齐，所以size后三比特始终为零，因此可以保存三个flag</p><ul><li>PREV_INUSE (bit 0): 上一块是否allocated</li><li>IS_MMAPPED(bit 1): 该chunk是否由mmap分配</li><li>NON_MAIN_ARENA(bit 2): 是否不属于main arena    </li></ul></li></ul><p>  <img src="https://i.loli.net/2021/08/22/bxX7pK4eVUrFG8A.png" alt="Allocated chunk"></p><h6 id="free-chunk-bin"><a href="#free-chunk-bin" class="headerlink" title="free chunk ( bin )"></a>free chunk ( bin )</h6><ul><li><p>prev_size</p></li><li><p>size</p><p>  同allocated chunk</p></li><li><p>fd：指向链表的下一个chunk( 含bin头 )</p></li><li><p>bk:  指向链表的前一个chunk( 含bin头 )</p></li><li><p>fd_nextsize: 指向下一个large chunk( 不含bin头 )</p></li><li><p>bk_nextsize: 指向前一个large chunk( 不含bin头 )</p></li></ul><p><img src="https://i.loli.net/2021/08/22/YPifbKr9R6TlNuA.png" alt="free chunk"></p><h6 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h6><ul><li>第一次malloc分配的heap为main arena，未分配的大堆块为top chunk</li></ul><h6 id="last-remainder"><a href="#last-remainder" class="headerlink" title="last remainder"></a>last remainder</h6><ul><li>malloc分配时unsorted bin切块后存入，unsorted bin仍存在</li></ul><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h5><p>chunk free后进入bin</p><h6 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h6><ul><li><p>单向链表, 相同大小在一条链上</p></li><li><p>LIFO </p></li><li><p><strong>不会把下一块chunk P设置成0</strong></p></li><li><p>size分为0x20，0x30，0x40 … 0x80</p><ul><li>global_max_fast = 0x80</li></ul></li></ul><p><img src="https://i.loli.net/2021/08/22/nB3SrvAiUIz2QwX.png" alt="fast bin"></p><h6 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h6><ul><li><p>双向链环, 相同大小在一条链上</p></li><li><p>FIFO</p></li><li><p><strong>会把下一块chunk P设置成0</strong></p></li><li><p>size: 0x20, 0x30, 0x40 … 0x90 … 0x3f0</p><ul><li>按照size大小分为62个bin, 分别为2~63</li></ul><table><thead><tr><th align="left">下标</th><th align="left">SIZE_SZ=8（64 位）</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">0x20</td></tr><tr><td align="left">3</td><td align="left">0x30</td></tr><tr><td align="left">4</td><td align="left">0x40</td></tr><tr><td align="left">5</td><td align="left">0x50</td></tr><tr><td align="left">X</td><td align="left">0xX0</td></tr><tr><td align="left">63(3F)</td><td align="left">0x3f0</td></tr></tbody></table><ul><li>其中0x20 … 0x90为unsorted bin切割后分配的</li></ul></li></ul><h6 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h6><ul><li>双向链环(sorted)</li><li>size &gt;= 1024(0x400)</li></ul><table><thead><tr><th align="left">组</th><th align="left">数量</th><th align="left">公差</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">32</td><td align="left">64B</td></tr><tr><td align="left">2</td><td align="left">16</td><td align="left">512B</td></tr><tr><td align="left">3</td><td align="left">8</td><td align="left">4096B</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">32768B</td></tr><tr><td align="left">5</td><td align="left">2</td><td align="left">262144B</td></tr><tr><td align="left">6</td><td align="left">1</td><td align="left">不限制</td></tr></tbody></table><h6 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h6><ul><li> 双向链环</li><li>free chunk大小大于0x80, glibc将chunk先放入unsorted bin</li></ul><p><img src="https://i.loli.net/2021/08/23/sE1QdxlB9IvUwmn.png" alt="bins"></p><h3 id="malloc的执行过程"><a href="#malloc的执行过程" class="headerlink" title="malloc的执行过程"></a>malloc的执行过程</h3><ul><li><p>第一次malloc：当申请内存空间 &lt;128 KB 时， kernel分配132KB的heap；&gt;128KB 时，使用mmap分配内存</p></li><li><p>第二次及之后：</p><ol><li>fastbin(LIFO)</li><li>bins 按照索引从小到大查找</li><li>top chunk</li><li>向kernel索要空间</li></ol></li></ul><h3 id="free-的执行过程与chunk的合并"><a href="#free-的执行过程与chunk的合并" class="headerlink" title="free 的执行过程与chunk的合并"></a>free 的执行过程与chunk的合并</h3><ul><li><p>free chunk先看上一块是否为free chunk(P位是否为0)，若是，则于前一堆块合并，在对前一个堆块unlink</p></li><li><p>再看下一堆块：</p><ol><li><p>top chunk: 与之合并（第二步使用的是合并之后的堆块）</p></li><li><p>free：合并后一同加入unsorted bin</p><p>inuse：加入unsorted bin</p></li></ol></li></ul><h1 id="堆利用手法"><a href="#堆利用手法" class="headerlink" title="堆利用手法"></a>堆利用手法</h1><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p>free(pointer)  后未将指针ptr清空, 该ptr称作dangling pointer，即为一个pointer指向一块释放的记忆体.</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ul><li>infomation leak</li><li>struct type confusion</li><li>double free</li></ul><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/">CTFwiki</a></li><li><a href="https://www.slideshare.net/AngelBoy1?utm_campaign=profiletracking&utm_medium=sssite&utm_source=ssslideview">Angleboy的PPT</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
